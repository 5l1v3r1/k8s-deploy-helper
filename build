#!/bin/bash

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
	DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
	SOURCE="$(readlink "$SOURCE")"
	[[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done

export DEPLOY_ROOT_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

source "$DEPLOY_ROOT_DIR/src/common.bash"

buildargs=$(get_buildargs)

if [[ -n "$CI_REGISTRY_USER" ]]; then
	echo "Logging to GitLab Container Registry with CI credentials..."
	docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
	echo ""
fi

echo "Building application..."

if [ "x$1" != "x" ]; then
	echo "Building Dockerfile-based application using the Dockerfile at $1"
	export SHORT=$(echo "$1" | cut -d'-' -f2-)
	docker pull $CI_REGISTRY_IMAGE:$SHORT-latest || true
	docker build --cache-from "$CI_REGISTRY_IMAGE:$SHORT-latest" -t "$CI_REGISTRY_IMAGE:$SHORT-$CI_REGISTRY_TAG" -t "$CI_REGISTRY_IMAGE:$SHORT-latest" $buildargs -f $1 .
	echo "Pushing to GitLab Container Registry..."
	docker push "$CI_REGISTRY_IMAGE:$SHORT-$CI_REGISTRY_TAG"
	docker push "$CI_REGISTRY_IMAGE:$SHORT-latest"

elif [[ -f Dockerfile ]]; then
	echo "Building Dockerfile-based application..."
    docker pull $CI_REGISTRY_IMAGE:latest || true
	docker build --cache-from "$CI_REGISTRY_IMAGE:latest" -t "$CI_REGISTRY_IMAGE:$CI_REGISTRY_TAG" -t "$CI_REGISTRY_IMAGE:latest" $buildargs .
	echo "Pushing to GitLab Container Registry..."
	docker push "$CI_REGISTRY_IMAGE:$CI_REGISTRY_TAG"
	docker push "$CI_REGISTRY_IMAGE:latest"
else
	echo "Dockerfile not found at root of repo, please use Deis if you want to use buildpacks"
	exit 1
fi