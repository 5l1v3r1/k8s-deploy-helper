#!/bin/bash

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done

export DEPLOY_ROOT_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

source "$DEPLOY_ROOT_DIR/src/common.bash"

if [ "x$1" != "x" ]; then
  export DOCKERFILE=$1
else
  export DOCKERFILE=Dockerfile
fi

# Make sure variables are set correctly
ensure_variables

# If BUILDARGS_FROM exists, change SECRET/STAGE_ prefixes to BUILDARG_ for later consumption
buildargs_from

# Set buildargs
set_buildargs

echo "Logging to Container Registry with CI credentials..."
docker login -u "$KDH_REGISTRY_USER" -p "$KDH_REGISTRY_PASSWORD" "$KDH_REGISTRY"
echo ""
fi

echo "Building application..."

if [ "x$1" != "x" ]; then
	echo "Building Dockerfile-based application using the Dockerfile at $1"
    # Look for KDH_INSERT_ARGS and edit Dockerfile
    insert_args
	export SHORT=$(echo "$1" | cut -d'-' -f2-)
	if [ "x$KDH_SKIP_LATEST" == "xtrue" ]; then
		echo "KDH_SKIP_LATEST is true, not building from latest"
		dockerbuild="docker build --pull -t \"$KDH_REGISTRY_IMAGE:$SHORT-$KDH_SHA\" $buildargs -f $1 ."
		eval $dockerbuild
	else
		dockerbuild="docker build --pull --cache-from \"$KDH_REGISTRY_IMAGE:$SHORT-latest\" -t \"$KDH_REGISTRY_IMAGE:$SHORT-$KDH_SHA\" $buildargs -f $1 ."
		eval $dockerbuild
	fi
	echo "Pushing to GitLab Container Registry..."
	docker push "$KDH_REGISTRY_IMAGE:$SHORT-$KDH_SHA"

elif [[ -f Dockerfile ]]; then
	echo "Building Dockerfile-based application..."
    # Look for KDH_INSERT_ARGS and edit Dockerfile
    insert_args
	if [ "x$KDH_SKIP_LATEST" == "xtrue" ]; then
		echo "KDH_SKIP_LATEST is true, not building from latest"
		dockerbuild="docker build --pull -t \"$KDH_REGISTRY_IMAGE:$KDH_SHA\" $buildargs ."
		eval $dockerbuild
	else
		docker pull $KDH_REGISTRY_IMAGE:latest || true
		dockerbuild="docker build --pull --cache-from \"$KDH_REGISTRY_IMAGE:latest\" -t \"$KDH_REGISTRY_IMAGE:$KDH_SHA\" $buildargs ."
		eval $dockerbuild
	fi
	echo "Pushing to GitLab Container Registry..."
	docker push "$KDH_REGISTRY_IMAGE:$KDH_SHA"
else
    export DOCKER_HOST='tcp://docker:2375'
	echo "No Dockerfile at root of repo. Using herokuish build packs."
    echo "Building env file"
    build_env
    echo "Starting herokuish"
    dockerrun="docker run -i --name=\"$KDH_CONTAINER_NAME\" -v \"$(pwd):/tmp/app:ro\" gliderlabs/herokuish /bin/bash -c \"/bin/herokuish buildpack build && (rm /app/.env || true)\""
	eval $dockerrun
    docker commit "$KDH_CONTAINER_NAME" "$KDH_REGISTRY_IMAGE:$KDH_SHA"
	docker rm "$KDH_CONTAINER_NAME"
	echo "Configuring $KDH_REGISTRY_IMAGE:$KDH_SHA docker image..."
    docker create --expose 5000 --env PORT=5000 --name="$KDH_CONTAINER_NAME" "$KDH_REGISTRY_IMAGE:$KDH_SHA" /bin/herokuish procfile start web
    docker commit "$KDH_CONTAINER_NAME" "$KDH_REGISTRY_IMAGE:$KDH_SHA"
    docker rm "$KDH_CONTAINER_NAME" >/dev/null

    echo "Pushing to GitLab Container Registry"
    docker push "$KDH_REGISTRY_IMAGE:$KDH_SHA"
fi
